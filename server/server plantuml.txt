@startuml
class Laboratory {
- String uuid
- String name
- String description
- VisabilityType visability
-- constructors --
+ Laboratory()
+ Laboratory(String name, String description, VisabilityType visability) 
-- getter & setter --
+ String getUuid()
+ String getName()
+ void setName(String name)
+ String getDescription()
+ void setDescription(String description)
+ VisabilityType getVisability()
+ void setVisability(VisabilityType visability)
}

interface LaboratoryRepository {
  List<Laboratory> findAll()
  Laboratory findByUuid(String laboratoryUuid)
  List<Laboratory> findByName(String name)
  List<Laboratory> findByVisability(VisabilityType visability)
  List<Laboratory> findByUser(String ownerUuid)
  Laboratory put(Laboratory laboratory)
  Laboratory create(String name, String description, VisabilityType visability)
  boolean delete(Laboratory laboratory)
}

class LaboratoryHibernateH2RepositoryImpl {
-- overriding --
+ List<Laboratory> findAll()
+ Laboratory findByUuid(String laboratoryUuid)
+ List<Laboratory> findByName(String name)
+ List<Laboratory> findByVisability(VisabilityType visability)
+ List<Laboratory> findByUser(String ownerUuid)
+ Laboratory put(Laboratory laboratory)
+ Laboratory create(String name, String description, VisabilityType visability)
+ boolean delete(Laboratory laboratory)
-- additional --
+ List<Laboratory> findByFilter(LaboratoryFilter... filterArray)
}

class SessionToken {
- String uuid;
- String userUuid;
- LocalDate initiation;
- LocalDate expiration;
- LocalDate lastUpdate;
-- constructors --
+ SessionToken() {
+ SessionToken(User user) {
+ SessionToken(String userUuid) {
-- getter & setter --
+ String getUuid() {
+ String getUserUuid() {
+ void setUserUuid(String userUuid) {
+ LocalDate getInitiation() {
+ void setInitiation(LocalDate initiation) {
+ LocalDate getExpiration() {
+ void setExpiration(LocalDate expiration) {
+ LocalDate getLastUpdate() {
+ void setLastUpdate(LocalDate lastUpdate)
}

interface SessionTokenRepository {
  List<SessionToken> findAll()
  List<SessionToken> findAllByUserUuid(String userUuid)
  SessionToken findByUuid(String sessionTokenUuid)
  SessionToken findCurrentByUser(User user)
  SessionToken findCurrentByUserUuid(String userUuid)
  SessionToken put(SessionToken sessionToken)
  SessionToken update(SessionToken sessionToken) throws JAXRException
  boolean delete(SessionToken sessionToken)
}

class SessionTokenHibernateH2RepositoryImpl {
-- overriding --
+ List<SessionToken> findAll()
+ List<SessionToken> findAllByUserUuid(String userUuid)
+ SessionToken findByUuid(String sessionTokenUuid)
+ SessionToken findCurrentByUser(User user)
+ SessionToken findCurrentByUserUuid(String userUuid)
+ SessionToken put(SessionToken sessionToken)
+ SessionToken update(SessionToken sessionToken) throws JAXRException
+ boolean delete(SessionToken sessionToken)
-- additional --
+ List<SessionToken> findByFilter(SessionTokenFilter... filterArray)
}

class User {
- String uuid
- String email;
- String username;
- String firstname;
- String lastname;
- String password;
- String salt;
- LocalDateTime registrationDateTime;
- boolean systemAdmin;
-- constructors --
+ User()
+ User(String email, String userName, String password, String firstname, String lastname)
-- getter & setter --
+ String getUuid()
+ void setUuid(String uuid)
+ String getEmail()
+ void setEmail(String email)
+ String getUsername()
+ void setUsername(String username)
+ String getFirstname()
+ void setFirstname(String firstname)
+ String getLastname()
+ void setLastname(String lastname)
+ String getPassword()
+ void setPassword(String password)
+ String getSalt()
+ void setSalt(String salt)
+ LocalDateTime getRegistrationDateTime()
+ void setRegistrationDateTime(LocalDateTime registrationDateTime)
+ boolean isSystemAdmin()
+ void setSystemAdmin(boolean systemAdmin)
}

interface UserRepository {
  List<User> findAll()
  User findByUuid(String userUuid)
  User findByEmail(String email)
  User findByUsername(String username)
  User findBySessionToken(String tokenUuid)
  User put(User user)
  boolean delete(User user)
  User register(String email, String username, String password)
  User register(String email, String username, String password, String lastname, String firstname)
}

class UserHibernateH2RepositoryImpl {
-- overriding --
+ List<User> findAll()
+ User findByUuid(String userUuid)
+ User findByEmail(String email)
+ User findByUsername(String username)
+ User findBySessionToken(String tokenUuid)
+ User put(User user)
+ boolean delete(User user)
+ User register(String email, String username, String password)
+ User register(String email, String username, String password, String lastname, String firstname)
-- additional --
+ List<User> findByFilter(UserFilter... filterArray)
}

class Permission {
- Long id;
- String userUuid;
- String laboratoryUuid;
- String workspaceUuid;
- PermissionType type;
-- constructors --
+ Permission()
+ Permission(User user, Laboratory laboratory, PermissionType type)
+ Permission(User user, Workspace workspace, PermissionType type)
+ Permission(Laboratory laboratory, Workspace workspace, PermissionType type)
+ Permission(String userUuid, String laboratoryUuid, String workspaceUuid, PermissionType type)
-- getter & setter --
+ Long getId()
+ String getUserUuid()
+ void setUserUuid(String user)
+ String getLaboratoryUuid()
+ void setLaboratoryUuid(String laboratory)
+ String getWorkspaceUuid()
+ void setWorkspaceUuid(String workspace)
+ PermissionType getType()
+ void setType(PermissionType type)
}

interface PermissionRepository {
  List<Permission> findAll()
  Permission findById(Long id)
  List<Permission> findByUserUuid(String ownerUuid)
  List<Permission> findByLaboratoryUuid(String laboratoryUuid)
  List<Permission> findByWorkspaceUuid(String workspaceUuid)
  List<Permission> findByType(PermissionType type)
  Permission findByUserAndLaboratoryUuids(String userUuid, String laboratoryUuid)
  Permission findByUserAndWorkspaceUuids(String userUuid, String workspaceUuid)
  Permission findByLaboratoryAndWorkspaceUuids(String laboratoryUuid, String workspaceUuid)
  Permission put(Permission permission)
  Permission create(String userUuid, String laboratoryUuid, String workspaceUuid, PermissionType type)
  boolean delete(Permission permission)
}

class PermissionHibernateH2RepositoryImpl {
-- overriding --
+ List<Permission> findAll()
+ Permission findById(Long id)
+ List<Permission> findByUserUuid(String ownerUuid)
+ List<Permission> findByLaboratoryUuid(String laboratoryUuid)
+ List<Permission> findByWorkspaceUuid(String workspaceUuid)
+ List<Permission> findByType(PermissionType type)
+ Permission findByUserAndLaboratoryUuids(String userUuid, String laboratoryUuid)
+ Permission findByUserAndWorkspaceUuids(String userUuid, String workspaceUuid)
+ Permission findByLaboratoryAndWorkspaceUuids(String laboratoryUuid, String workspaceUuid)
+ Permission put(Permission permission)
+ Permission create(String userUuid, String laboratoryUuid, String workspaceUuid, PermissionType type)
+ boolean delete(Permission permission)
-- additional --
+ List<Permission> findByFilter(PermissionFilter... filterArray)
}

enum PermissionType {
  OWNER
  ADMINISTRATOR
  CONTRIBUTOR
  GUEST
}

class PermissionGroup {
+ {static} PermissionType[] OWNER
+ {static} PermissionType[] ADMINISTRATOR
+ {static} PermissionType[] CONTRIBUTOR
+ {static} PermissionType[] GUEST
-- constructors --
+ PermissionGroup()
}

enum VisabilityType {
  PUBLIC
  PROTECTED
  PRIVATE
}

class Workspace {
- String uuid
- String name
- String description
- VisabilityType visability
- String laboratoryUuid
-- constructors --
+ Workspace()
+ Workspace(String name, String description, VisabilityType visability, String laboratoryUuid) 
-- getter & setter --
+ String getUuid()
+ String getName()
+ void setName(String name)
+ String getDescription()
+ void setDescription(String description)
+ VisabilityType getVisability()
+ void setVisability(VisabilityType visability)
+ String getLaboratoryUuid()
+ void setLaboratoryUuid(String laboratoryUuid)
}

interface WorkspaceRepository {
  List<Workspace> findAll()
  Workspace findByUuid(String workspaceUuid)
  List<Workspace> findByName(String name)
  List<Workspace> findByVisability(VisabilityType visability)
  List<Workspace> findByUser(String ownerUuid)
  List<Workspace> findByLaboratory(String laboratoryUuid)
  Workspace put(Workspace workspace)
  Workspace create(String name, String description, VisabilityType visability, String laboratoryUuid)
  boolean delete(Workspace workspace)
}

class WorkspaceHibernateH2RepositoryImpl {
-- overriding --
+ List<Workspace> findAll()
+ Workspace findByUuid(String workspaceUuid)
+ List<Workspace> findByName(String name)
+ List<Workspace> findByVisability(VisabilityType visability)
+ List<Workspace> findByUser(String ownerUuid)
+ List<Workspace> findByLaboratory(String laboratoryUuid)
+ Workspace put(Workspace workspace)
+ Workspace create(String name, String description, VisabilityType visability, String laboratoryUuid)
+ boolean delete(Workspace workspace)
-- additional --
+ List<Workspace> findByFilter(WorkspaceFilter... filterArray)
}

LaboratoryRepository --> Laboratory : persists
LaboratoryRepository <|.. LaboratoryHibernateH2RepositoryImpl : implements
SessionTokenRepository --> SessionToken : persists
SessionTokenRepository <|.. SessionTokenHibernateH2RepositoryImpl : implements
UserRepository --> User : persists
UserRepository <|.. UserHibernateH2RepositoryImpl : implements
User --> Permission : has level
User --> SessionToken : recieves
Permission --> Laboratory : gives rights
Permission --> Workspace : gives rights
PermissionRepository --> Permission : persists
PermissionRepository <|.. PermissionHibernateH2RepositoryImpl : implements
PermissionType --> Permission : types
PermissionGroup --> PermissionType : concentraits
Workspace --> Laboratory : is part of
WorkspaceRepository --> Workspace : persists
WorkspaceRepository <|.. WorkspaceHibernateH2RepositoryImpl : implements
VisabilityType --> Laboratory : influences visability
VisabilityType --> Workspace : influences visability
@enduml